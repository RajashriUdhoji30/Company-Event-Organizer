'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateField;

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _get = require('./get');

var _get2 = _interopRequireDefault(_get);

var _mapValues = require('./map-values');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _formReducer = require('../reducers/form-reducer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function assocIn(state, path, value, fn) {
  if (!fn) return _icepick2.default.assocIn(state, path, value);

  var key0 = path[0];

  if (path.length === 1) {
    return fn(_icepick2.default.assoc(state, key0, value));
  }

  return fn(_icepick2.default.assoc(state, key0, assocIn(state[key0] || {}, path.slice(1), value, fn)));
}

function updateField(state, path, newState, newSubState, updater) {
  var field = path.length ? (0, _get2.default)(state, path, _formReducer.initialFieldState) : state;

  var fieldPath = field.hasOwnProperty('$form') ? [].concat(_toConsumableArray(path), ['$form']) : path;

  var fieldState = (0, _get2.default)(state, fieldPath, _formReducer.initialFieldState);

  var updatedFieldState = typeof newState === 'function' ? newState(fieldState) : newState;

  if ('$form' in field && newSubState) {
    var formState = (0, _mapValues2.default)(field, function (subState, key) {
      if (key === '$form') {
        return _icepick2.default.assign(fieldState, updatedFieldState);
      }

      var updatedSubState = typeof newSubState === 'function' ? newSubState(subState, updatedFieldState) : newSubState;

      return _icepick2.default.assign(subState, updatedSubState);
    });

    if (!path.length) return formState;

    return assocIn(state, path, formState, updater);
  }

  return assocIn(state, fieldPath, _icepick2.default.assign(fieldState, updatedFieldState), updater);
}